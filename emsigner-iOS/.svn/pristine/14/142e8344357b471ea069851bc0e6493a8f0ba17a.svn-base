//
//  CompletedNextVC.m
//  emSigner
//
//  Created by Administrator on 12/21/16.
//  Copyright Â© 2016 Emudhra. All rights reserved.
//

#import "CompletedNextVC.h"
#import "WebserviceManager.h"
#import "HoursConstants.h"
#import "MBProgressHUD.h"
#import "NSObject+Activity.h"
#import "ShareVC.h"
#import "CompleteStatusVC.h"

#include "mupdf/common.h"
#import "mupdf/MuPageViewNormal.h"
#import "mupdf/MuPageViewReflow.h"
#import "mupdf/MuTextFieldController.h"
#import "mupdf/MuChoiceFieldController.h"
#import "mupdf/MuPrintPageRenderer.h"

#define GAP 5
#define INDICATOR_Y -44-24
#define SLIDER_W (width - GAP - 24)
#define SEARCH_W (width - GAP - 170)
#define MIN_SCALE (1.0)
#define MAX_SCALE (5.0)

@interface CompletedNextVC ()<CellPopUp>
{
    CustomPopOverVC *popVC;
}
@property (nonatomic, strong) UITextView *shareTextView;
@end

@implementation CompletedNextVC

enum
{
    ResourceCacheMaxSize = 128<<20	/**< use at most 128M for resource cache */
};

fz_document *doc;
MuDocRef *docRef;
NSString *key;
NSString *_filePath;
BOOL reflowMode;
UIScrollView *canvasScrollView;
UIBarButtonItem *backButton;
int barmode;
int searchPage;
int cancelSearch;
int showLinks;
int width; // current screen size
int height;
int current; // currently visible page
int scroll_animating; // stop view updates during scrolling animations
float scale; // scale applied to views (only used in reflow mode)
BOOL _isRotating;

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
   _addFile = [[NSMutableArray alloc] init];
    
    UIView *view = [[UIView alloc] initWithFrame: CGRectZero];
    view.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    [view setAutoresizesSubviews: YES];
    view.backgroundColor = [UIColor grayColor];
    
    canvasScrollView = [[UIScrollView alloc] initWithFrame: CGRectMake(0,0,self.pdfView.bounds.size.width, self.pdfView.bounds.size.height)];
    canvasScrollView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    [canvasScrollView setPagingEnabled: YES];
    [canvasScrollView setShowsHorizontalScrollIndicator: NO];
    [canvasScrollView setShowsVerticalScrollIndicator: NO];
    canvasScrollView.delegate = self;
    [self.pdfView addSubview: canvasScrollView];

    [self.signatorylbl sizeToFit];
    if (self.signatoryString != nil) {
        self.signatorylbl.text =[NSString stringWithFormat:@"%@",self.signatoryString];
    }
   // [canvasScrollView addSubview:signatorylbl];
    
    UIButton* customButton = [UIButton buttonWithType:UIButtonTypeCustom];
    [customButton setImage:[UIImage imageNamed:@"three-aligned-squares-in-vertical-line"] forState:UIControlStateNormal];
    [customButton sizeToFit];
    UIBarButtonItem* customBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:customButton];
    [customButton addTarget:self
                     action:@selector(flipView:)
           forControlEvents:UIControlEventTouchUpInside];
    
    self.navigationItem.rightBarButtonItem = customBarButtonItem;
    
    UIButton* customButton1 = [UIButton buttonWithType:UIButtonTypeCustom];
    [customButton1 setImage:[UIImage imageNamed:@"ico-back-24.png"] forState:UIControlStateNormal];
    [customButton1 sizeToFit];
    UIBarButtonItem* customBarButtonItem1 = [[UIBarButtonItem alloc] initWithCustomView:customButton1];
    [customButton1 addTarget:self
                     action:@selector(popViewControllerAnimated:)
                     forControlEvents:UIControlEventTouchUpInside];
    
    self.navigationItem.leftBarButtonItem = customBarButtonItem1;
    
    
    if ([_documentCount intValue] > 1) {
        customButton.hidden = NO;
    }
    else if ([_attachmentCount intValue] > 0)
    {
        customButton.hidden = NO;
    }
    else{
        customButton.hidden = YES;
    }

}

- (instancetype) initWithFilename: (NSString*)filename path:(NSString *)cstr document: (MuDocRef *)aDoc
{
    self = [super initWithNibName:nil bundle:nil];
    if (!self)
        return nil;
    
#if __IPHONE_OS_VERSION_MAX_ALLOWED >= 70000
    if ([self respondsToSelector:@selector(automaticallyAdjustsScrollViewInsets)])
        self.automaticallyAdjustsScrollViewInsets = NO;
#endif
    // key = [filename copy];
    docRef = aDoc;
    doc = docRef->doc;
    _filePath = [cstr copy];
    
    //  this will be created right before the outline is shown
    //outline = nil;
    
    dispatch_sync(queue, ^{});
    
    return self;
}


- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void) viewWillLayoutSubviews
{
    CGSize size = canvasScrollView.frame.size;
   // int max_width = fz_max(width, size.width);
    
    width = size.width;
    height = size.height;
    
    canvasScrollView
    .contentInset = UIEdgeInsetsZero;
    canvasScrollView.contentSize = CGSizeMake(fz_count_pages(ctx, doc) * width, height);
    canvasScrollView.contentOffset = CGPointMake(current * width, 0);
    
    // use max_width so we don't clamp the content offset too early during animation
//    canvasScrollView.contentSize = CGSizeMake(fz_count_pages(ctx, doc) * max_width, height);
//    canvasScrollView.contentOffset = CGPointMake(current * width, 0);
    
    for (UIView<MuPageView> *view in canvasScrollView.subviews) {
        if (view.number == current) {
            view.frame = CGRectMake(view.number * width, 0, width-GAP, height);
            [view willRotate];
        }
    }
    for (UIView<MuPageView> *view in canvasScrollView.subviews) {
        if (view.number != current) {
            view.frame = CGRectMake(view.number * width, 0, width-GAP, height);
            [view willRotate];
        }
    }
}

- (void) viewDidAppear: (BOOL)animated
{
    [super viewDidAppear:animated];
    [self scrollViewDidScroll: canvasScrollView];
}
- (void) gotoPage: (int)number animated: (BOOL)animated
{
    if (number < 0)
        number = 0;
    if (number >= fz_count_pages(ctx, doc))
        number = fz_count_pages(ctx, doc) - 1;
    if (current == number)
        return;
    if (animated) {
        // setContentOffset:animated: does not use the normal animation
        // framework. It also doesn't play nice with the tap gesture
        // recognizer. So we do our own page flipping animation here.
        // We must set the scroll_animating flag so that we don't create
        // or remove subviews until after the animation, or they'll
        // swoop in from origo during the animation.
        
        scroll_animating = YES;
        [UIView beginAnimations: @"MuScroll" context: NULL];
        [UIView setAnimationDuration: 0.4];
        [UIView setAnimationBeginsFromCurrentState: YES];
        [UIView setAnimationDelegate: self];
        [UIView setAnimationDidStopSelector: @selector(onGotoPageFinished)];
        
        for (UIView<MuPageView> *view in canvasScrollView.subviews)
            [view resetZoomAnimated: NO];
        
        canvasScrollView.contentOffset = CGPointMake(number * width, 0);
        //slider.value = number;
        //indicator.text = [NSString stringWithFormat: @" %d of %d ", number+1, fz_count_pages(ctx, doc)];
        
        [UIView commitAnimations];
    } else {
        for (UIView<MuPageView> *view in canvasScrollView.subviews)
            [view resetZoomAnimated: NO];
        canvasScrollView.contentOffset = CGPointMake(number * width, 0);
    }
    current = number;
}


- (void) onGotoPageFinished
{
    scroll_animating = NO;
    [self scrollViewDidScroll: canvasScrollView];
}


- (void) resetSearch
{
    searchPage = -1;
    for (UIView<MuPageView> *view in canvasScrollView
         .subviews)
        [view clearSearchResults];
}
- (void) scrollViewDidScroll: (UIScrollView*)scrollview
{
    // scrollViewDidScroll seems to get called part way through a screen rotation.
    // (This is possibly a UIScrollView bug - see
    // http://stackoverflow.com/questions/4123991/uiscrollview-disable-scrolling-while-rotating-on-iphone-ipad/8141423#8141423 ).
    // This ends up corrupting the current page number, because the calculation
    // 'current = x / width' is using the new value of 'width' before the
    // pages have been resized/repositioned. To avoid this problem, we filter out
    // calls to scrollViewDidScroll during rotation.
    if (_isRotating)
        return;
    
    if (width == 0)
        return; // not visible yet
    
    if (scroll_animating)
        return; // don't mess with layout during animations
    
    float x = canvasScrollView.contentOffset.x + width * 0.5f;
    current = x / width;
    
    //[[NSUserDefaults standardUserDefaults] setInteger: current forKey: key];
    
    //indicator.text = [NSString stringWithFormat: @" %d of %d ", current+1, fz_count_pages(ctx, doc)];
    //slider.value = current;
    
    // swap the distant page views out
    
    NSMutableSet *invisiblePages = [[NSMutableSet alloc] init];
    for (UIView<MuPageView> *view in canvasScrollView.subviews) {
        if (view.number != current)
            [view resetZoomAnimated: YES];
        if (view.number < current - 2 || view.number > current + 2)
            [invisiblePages addObject: view];
    }
    for (UIView<MuPageView> *view in invisiblePages)
        [view removeFromSuperview];
    //[invisiblePages release]; // don't bother recycling them...
    
    [self createPageView: current];
    [self createPageView: current - 1];
    [self createPageView: current + 1];
    
        // reset search results when page has flipped
        if (current != searchPage)
            [self resetSearch];
}


- (void) createPageView: (int)number
{
    
    if (number < 0 || number >= fz_count_pages(ctx, doc))
        return;
    int found = 0;
    for (UIView<MuPageView> *view in canvasScrollView.subviews)
        if (view.number == number)
            found = 1;
    if (!found) {
        UIView<MuPageView> *view
        = reflowMode
        ? [[MuPageViewReflow alloc] initWithFrame:CGRectMake(number * width, 0, width-GAP, height) document:docRef page:number]
        : [[MuPageViewNormal alloc] initWithFrame:CGRectMake(number * width, 0, width-GAP, height) dialogCreator:self updater:self document:docRef page:number];
        [view setScale:scale];
        [canvasScrollView addSubview: view];
        if (showLinks)
            [view showLinks];
        //[view release];
    }

    
//    if (number < 0 || number >= fz_count_pages(ctx, doc))
//        return;
//    int found = 0;
//    for (UIView<MuPageView> *view in _canvasScrollView.subviews)
//        if (view.number == number)
//            found = 1;
//    if (!found) {
//        UIView<MuPageView> *view
//        = reflowMode
//        ? [[MuPageViewReflow alloc] initWithFrame:CGRectMake(0, (number * height), width, height+GAP) document:docRef page:number]
//        : [[MuPageViewNormal alloc] initWithFrame:CGRectMake(0, (number * height), width, height+GAP) dialogCreator:self updater:self document:docRef page:number];
//        [view setScale:scale];
//        [_canvasScrollView addSubview: view];
//        if (showLinks)
//            [view showLinks];
//        //[view release];
//    }
}


//



-(void)viewWillAppear:(BOOL)animated
{
    current=0;
    self.title = _myTitle;
    [self.navigationController.navigationBar setTitleTextAttributes:
    @{NSForegroundColorAttributeName:[UIColor whiteColor]}];
    
}


-(void)flipView:(UIButton*)sender
{
    if ([_documentCount isEqualToString:@"1"] && _attachmentCount>0) {
        UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
        popVC = [newStoryBoard instantiateViewControllerWithIdentifier:@"CustomPopOverVC"];
        UINavigationController *popNav = [[UINavigationController alloc]initWithRootViewController: popVC];
        popVC.delegate = self;
        popVC.preferredContentSize = CGSizeMake(200,8);
        popVC.attachmentCount = _attachmentCount;
        popVC.documentCount = _documentCount;
        popVC.workflowID =_workflowID;
        popNav.modalPresentationStyle = UIModalPresentationPopover;
        _popover = popNav.popoverPresentationController;
        _popover.delegate = self;
        _popover.sourceView = self.view;
        CGRect frame = [sender frame];
        frame.origin.y = self.view.frame.origin.y - frame.size.height - 25;
        frame.origin.x =  self.view.frame.size.width - frame.size.width +20;
        _popover.sourceRect = frame;
        popNav.navigationBarHidden = YES;
        [self presentViewController: popNav animated:YES completion:nil];
    }
    
    else{
        if ([_attachmentCount intValue] > 0) {
            UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
            popVC = [newStoryBoard instantiateViewControllerWithIdentifier:@"CustomPopOverVC"];
            UINavigationController *popNav = [[UINavigationController alloc]initWithRootViewController: popVC];
            popVC.delegate = self;
            popVC.preferredContentSize = CGSizeMake(200,60);
            popVC.attachmentCount = _attachmentCount;
            popVC.documentCount = _documentCount;
            popVC.workflowID =_workflowID;
            popNav.modalPresentationStyle = UIModalPresentationPopover;
            _popover = popNav.popoverPresentationController;
            _popover.delegate = self;
            _popover.sourceView = self.view;
            CGRect frame = [sender frame];
            frame.origin.y = self.view.frame.origin.y - frame.size.height - 25;
            frame.origin.x =  self.view.frame.size.width - frame.size.width +20;
            _popover.sourceRect = frame;
            popNav.navigationBarHidden = YES;
            [self presentViewController: popNav animated:YES completion:nil];
        }
        else{
            UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
            popVC = [newStoryBoard instantiateViewControllerWithIdentifier:@"CustomPopOverVC"];
            UINavigationController *popNav = [[UINavigationController alloc]initWithRootViewController: popVC];
            popVC.delegate = self;
            popVC.preferredContentSize = CGSizeMake(200,8);
            popVC.attachmentCount = _attachmentCount;
            popVC.documentCount = _documentCount;
            popVC.workflowID =_workflowID;
            popNav.modalPresentationStyle = UIModalPresentationPopover;
            _popover = popNav.popoverPresentationController;
            _popover.delegate = self;
            _popover.sourceView = self.view;
            CGRect frame = [sender frame];
            frame.origin.y = self.view.frame.origin.y - frame.size.height - 25;
            frame.origin.x =  self.view.frame.size.width - frame.size.width +20;
            _popover.sourceRect = frame;
            popNav.navigationBarHidden = YES;
            [self presentViewController: popNav animated:YES completion:nil];
        }
        
    }

}


-(void)dissmissCellPopup:(NSInteger)row{
    switch (row) {
        case 0:
        {
            
            [self dismissViewControllerAnimated:NO completion:nil];
            UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
            CompleteMultipleDocumentVC *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"CompleteMultipleDocumentVC"];
            objTrackOrderVC.delegate = self;
            objTrackOrderVC.workFlowId = _workflowID;
            objTrackOrderVC.currentSelectedRow = _selectedIndex;
            objTrackOrderVC.strExcutedFrom = _strExcutedFrom;
            //objTrackOrderVC.strExcutedFrom = @"DocsStore";
            objTrackOrderVC.document = @"Documents";
            //            self.definesPresentationContext = YES;
            //            //self is presenting view controller
            //            objTrackOrderVC.modalPresentationStyle = UIModalPresentationOverCurrentContext;
            [self.navigationController pushViewController:objTrackOrderVC animated:YES];
        }
            
            break;
        case 1:
        {
            [self dismissViewControllerAnimated:NO completion:nil];
            UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
            AttachedVC *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"AttachedVC"];
            objTrackOrderVC.workFlowId = _workflowID;
            objTrackOrderVC.currentSelectedRow = _selectedIndex;
            objTrackOrderVC.document = @"Attached Documents";
            
            [self.navigationController pushViewController:objTrackOrderVC animated:YES];
        }
            
            break;
            
            
        default:
            break;
    }
    
}


#pragma mark == UIPopoverPresentationControllerDelegate ==
- (UIModalPresentationStyle)adaptivePresentationStyleForPresentationController:(UIPresentationController *)controller
{
    return UIModalPresentationNone;
}

-(void)dataFromControllerTwo:(NSString *)data
{
    _multiplePdfImagedetail=data;
}

-(void)documentNameControllerTwo:(NSString *)dName
{
    _myTitle = dName;
}

-(void)dataForWorkflowId:(NSString *)dWorkflowid
{
    _documentID = dWorkflowid;
}

-(void)selectedCellIndexTwo:(int)iIndex
{
    _selectedIndex = iIndex;
}

- (IBAction)downloadBtn:(id)sender
{
//    UIAlertView *alertView36 = [[UIAlertView alloc] initWithTitle:@"Download"
//                                                        message:@"Do you really want to download?"
//                                                       delegate:self
//                                              cancelButtonTitle:@"Yes"
//                                              otherButtonTitles:@"No", nil];
//    alertView36.tag = 36;
//    [alertView36 show];
    
    UIAlertController * alert = [UIAlertController
                                 alertControllerWithTitle:@"Download"
                                 message:@"Do you want to download document?"
                                 preferredStyle:UIAlertControllerStyleAlert];
    
    //Add Buttons
    
    UIAlertAction* yesButton = [UIAlertAction
                                actionWithTitle:@"Yes"
                                style:UIAlertActionStyleDefault
                                handler:^(UIAlertAction * action) {
                                    //Handle your yes please button action here
                                    [self startActivity:@"Loading..."];
                                    
                                    NSString *requestURL = [NSString stringWithFormat:@"%@DownloadAllWorkflowDocumentsById?WorkFlowId=%@",kDownloadPdf,_workflowID];
                                    [WebserviceManager sendSyncRequestWithURLGet:requestURL method:SAServiceReqestHTTPMethodGET body:requestURL completionBlock:^(BOOL status, id responseValue) {
                                        
                                        if(status)
                                        {
                                            dispatch_async(dispatch_get_main_queue(), ^{
                                                
                                                _pdfImageArray=[responseValue valueForKey:@"Response"];
                                                
                                                if (_pdfImageArray != (id)[NSNull null])
                                                {
                                                    [_addFile removeAllObjects];
                                                    for(int i=0; i<[_pdfImageArray count];i++)
                                                    {
                                                        
                                                        _pdfFileName = [[_pdfImageArray objectAtIndex:i] objectForKey:@"DocumentName"];
                                                        _pdfFiledata = [[_pdfImageArray objectAtIndex:i] objectForKey:@"Document"];
                                                        
                                                        NSData *data = [[NSData alloc]initWithBase64EncodedString:_pdfFiledata options:0];
                                                        NSString *documentsDirectory = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES)[0];
                                                        CFUUIDRef uuid = CFUUIDCreate(NULL);
                                                        CFStringRef uuidString = CFUUIDCreateString(NULL, uuid);
                                                        CFRelease(uuid);
                                                        NSString *uniqueFileName = [NSString stringWithFormat:@"%@%@%@%@",_pdfFileName,@"                                                 ",(__bridge NSString *)uuidString, _pdfFileName];
                                                        
                                                        
                                                        NSString *path = [documentsDirectory stringByAppendingPathComponent:uniqueFileName];
                                                        [_addFile addObject:path];
                                                        
                                                        [data writeToFile:path atomically:YES];
                                                        
                                                        
                                                        
                                                        if (i==_pdfImageArray.count-1)
                                                        {
                                                            [self stopActivity];
                                                            QLPreviewController *previewController=[[QLPreviewController alloc]init];
                                                            previewController.delegate=self;
                                                            previewController.dataSource=self;
                                                            //[self presentModalViewController:previewController animated:YES];
                                                            [self presentViewController:previewController animated:YES completion:nil];
                                                            [previewController.navigationItem setRightBarButtonItem:nil];
                                                        }
                                                        
                                                    }
                                                }
                                                else{
                                                    return ;
                                                }
                                                
                                            });
                                            
                                        }
                                        else{
                                            
                                        }
                                        
                                    }];
                                }];
    
    UIAlertAction* noButton = [UIAlertAction
                               actionWithTitle:@"No"
                               style:UIAlertActionStyleDefault
                               handler:^(UIAlertAction * action) {
                                   //Handle no, thanks button
                               }];
    
    //Add your buttons to alert controller
    
    [alert addAction:yesButton];
    [alert addAction:noButton];
    
    [self presentViewController:alert animated:YES completion:nil];
}

- (IBAction)documentLog:(id)sender
{
    UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
    DocumentLogVC *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"DocumentLogVC"];
    objTrackOrderVC.workflowID = _workflowID ;
    [self.navigationController pushViewController:objTrackOrderVC animated:YES];

}

-(void)popViewControllerAnimated:(UIButton*)sender
{
    if ([self.strExcutedFrom isEqualToString:@"DocsStore"])
    {
        [self.navigationController popToViewController:[self.navigationController.viewControllers objectAtIndex:1] animated:YES];
    }
    else{
        [self.navigationController popViewControllerAnimated:YES];
    }
    
}

- (IBAction)shareBtn:(id)sender
{
    
    NSString *pendingdocumentName =_myTitle;
    NSString *pendingWorkflowID =_workflowID;
    UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
    ShareVC *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"ShareVC"];
    objTrackOrderVC.documentName = pendingdocumentName;
    objTrackOrderVC.workflowID = pendingWorkflowID;
    [self.navigationController pushViewController:objTrackOrderVC animated:YES];
    
}


- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    
    
    /*****************************Download**************************************/
    
    if (alertView.tag == 36)
    {
        if (buttonIndex == 0)
        {
            
            [self startActivity:@"Loading..."];
            
            NSString *requestURL = [NSString stringWithFormat:@"%@DownloadWorkFlowDocumentsByWorkflowId?WorkFlowId=%@",kDownloadPdf,_workflowID];
            [WebserviceManager sendSyncRequestWithURLGet:requestURL method:SAServiceReqestHTTPMethodGET body:requestURL completionBlock:^(BOOL status, id responseValue) {
                
                
                
                if(status)
                {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        
                        _pdfImageArray=[responseValue valueForKey:@"Response"];
                        
                        if (_pdfImageArray != (id)[NSNull null])
                        {
                            [_addFile removeAllObjects];
                            for(int i=0; i<[_pdfImageArray count];i++)
                            {
                                
                                _pdfFileName = [[_pdfImageArray objectAtIndex:i] objectForKey:@"DocumentName"];
                                _pdfFiledata = [[_pdfImageArray objectAtIndex:i] objectForKey:@"FileData"];
                                
                                NSData *data = [[NSData alloc]initWithBase64EncodedString:_pdfFiledata options:0];
                                NSString *documentsDirectory = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES)[0];
                                CFUUIDRef uuid = CFUUIDCreate(NULL);
                                CFStringRef uuidString = CFUUIDCreateString(NULL, uuid);
                                CFRelease(uuid);
                                NSString *uniqueFileName = [NSString stringWithFormat:@"%@%@%@%@",_pdfFileName,@"                                                 ",(__bridge NSString *)uuidString, _pdfFileName];
                                
                                
                                NSString *path = [documentsDirectory stringByAppendingPathComponent:uniqueFileName];
                                [_addFile addObject:path];

                                [data writeToFile:path atomically:YES];
                                
                                
                                
                                if (i==_pdfImageArray.count-1)
                                {
                                    [self stopActivity];
                                    QLPreviewController *previewController=[[QLPreviewController alloc]init];
                                    previewController.delegate=self;
                                    previewController.dataSource=self;
                                    //[self presentModalViewController:previewController animated:YES];
                                    [self presentViewController:previewController animated:YES completion:nil];
                                    [previewController.navigationItem setRightBarButtonItem:nil];
                                }
                                
                            }
                        }
                        else{
                            return ;
                        }
                        
                    });
                    
                }
                else{
                    
                }
                
            }];
            
            
        }
        else if (buttonIndex == 1)
        {
            
        }
    }
    /****************************Open Downloaded file*******************************/
//    else if (alertView.tag == 28)
//    {
//        if (buttonIndex == 0)
//        {
//            //currentPreviewIndex=[(UIButton *)sender tag]-1;
//            
//            QLPreviewController *previewController=[[QLPreviewController alloc]init];
//            previewController.delegate=self;
//            previewController.dataSource=self;
//            //[self presentModalViewController:previewController animated:YES];
//            [self presentViewController:previewController animated:YES completion:nil];
//            [previewController.navigationItem setRightBarButtonItem:nil];
//        }
//        
//    }
    /******************************************************************************/
}


#pragma mark - data source(Preview)
//Data source methods
//â numberOfPreviewItemsInPreviewController:
//â previewController:previewItemAtIndex:
- (NSInteger)numberOfPreviewItemsInPreviewController:(QLPreviewController *)controller
{
    return [_addFile count];
}

- (id <QLPreviewItem>)previewController:(QLPreviewController *)controller previewItemAtIndex:(NSInteger)index
{
    //You'll need an additional '/'
    NSString *fileName = [_addFile objectAtIndex:index];
    //NSString *fullPath = [path stringByAppendingFormat:@"/%@", fileName];
    return [NSURL fileURLWithPath:fileName];

}

#pragma mark - delegate methods


- (BOOL)previewController:(QLPreviewController *)controller shouldOpenURL:(NSURL *)url forPreviewItem:(id <QLPreviewItem>)item
{
    return YES;
}

- (CGRect)previewController:(QLPreviewController *)controller frameForPreviewItem:(id <QLPreviewItem>)item inSourceView:(UIView **)view
{
    
    //Rectangle of the button which has been pressed by the user
    //Zoom in and out effect appears to happen from the button which is pressed.
    UIView *view1 = [self.view viewWithTag:currentPreviewIndex+1];
    return view1.frame;
}


/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/


@end
