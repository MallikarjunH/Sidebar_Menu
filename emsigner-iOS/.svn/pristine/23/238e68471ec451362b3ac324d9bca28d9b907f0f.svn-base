//
//  SignersDisplay.m
//  emSigner
//
//  Created by EMUDHRA on 29/10/18.
//  Copyright Â© 2018 Emudhra. All rights reserved.
//

#import "SignersDisplay.h"
#import "SignerListCell.h"
#import "WebserviceManager.h"
#import "MPBSignatureViewController.h"
static int const kHeaderSectionTag = 6900;

@interface SignersDisplay ()
{
    NSMutableArray*arr;
     NSMutableArray*arr1;
    NSString * SubscriberId;
    NSMutableDictionary * Subscriberdictionary;
}
@property (assign) NSInteger expandedSectionHeaderNumber;
@property (assign) NSInteger SectionNumber;
@property (assign) UITableViewHeaderFooterView *expandedSectionHeader;
@end

@implementation SignersDisplay

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    _d =[[NSMutableArray alloc]init];
    _subscriberIdarray=[[NSMutableArray alloc]init];
    self.signersList.delegate = self;
    self.signersList.dataSource = self;
    
    _holdSignersList = [[NSMutableArray alloc] init];
    _passsignerArray = [[NSMutableArray alloc] init];
  self.expandedSectionHeaderNumber = -1;
    self.SectionNumber = 0;
    
    self.navigationController.navigationBar.barTintColor = [UIColor colorWithRed:0 green:96.0/255.0 blue:192.0/255.0 alpha:1.0];
    self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
    
    
    UIBarButtonItem* customBarButtonItem = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemStop target:self action:@selector(dismissViewController)];
    
    self.navigationItem.leftBarButtonItem = customBarButtonItem;
    UIBarButtonItem *saveButton = [[UIBarButtonItem alloc]initWithTitle:@"Save" style:UIBarButtonItemStylePlain target:self action:@selector(savebtnAction:)];
    self.navigationItem.rightBarButtonItem = saveButton;
    self.signersList.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
  
        [self.signersList registerNib:[UINib nibWithNibName:@"SignerListCell" bundle:nil] forCellReuseIdentifier:@"SignerListCell"];
    self.signersList.rowHeight = UITableViewAutomaticDimension;
    self.signersList.estimatedRowHeight = 100;
    [self getSignersListToDisplay];
    
}
-(void)dismissViewController{
    [self dismissViewControllerAnimated:true completion:nil];
}
-(void)viewWillAppear:(BOOL)animated
{
    NSMutableDictionary *empty = [[NSMutableDictionary alloc]init];
    for (int i = 0; i< self.signersCount; i++) {
        [_subscriberIdarray addObject:empty];
    }
}
-(void)viewWillDisappear:(BOOL)animated
{
  
//    for (int i = 0; i<self.signersCount; i++) {
//        [_d addObject:[self.signersList headerViewForSection:i].textLabel.text];
//        if (Subscriberdictionary != nil) {
//            [_subscriberIdarray addObject:Subscriberdictionary];
//        }
//
//    }
      //  [_delegate sendDataTosigners:_d :_subscriberIdarray];

}
-(void)savebtnAction:(UIButton *)sender
{
    
    NSMutableDictionary* sendingvalues = [[NSMutableDictionary alloc]init];
    
           // NSInteger cid =[self.CategoryId integerValue];
            [sendingvalues setObject:self.CategoryId forKey:@"CategoryId"];
            [sendingvalues setObject:_CategoryName forKey:@"CategoryName"];
            [sendingvalues setObject:self.Documentname forKey:@"DocumentName"];
            [sendingvalues setObject:_subscriberIdarray  forKey:@"Signatories"];
            [sendingvalues setObject:@"false" forKey:@"IsSign"];
            [sendingvalues setObject:_ConfigId forKey:@"ConfigId"];
            [sendingvalues setValue:[NSNumber numberWithInteger:self.DocumentID] forKey:@"DocumentId"];
    
    
    for (int i = 0; i<self.signersCount; i++) {
        [_d addObject:[self.signersList headerViewForSection:i].textLabel.text];
//        if (Subscriberdictionary != nil) {
//            [_subscriberIdarray addObject:Subscriberdictionary];
//        }

    }
    if ([_d containsObject:@"ME"]) {
        
        [self showModal:UIModalPresentationFullScreen style:[MPBDefaultStyleSignatureViewController alloc]];
    }
    else
    {
        
  //  [_delegate sendDataTosigners:self.d :sendingvalues];
        [self.navigationController dismissViewControllerAnimated:true completion:^ {
            [_delegate sendDataTosigners:self.d :sendingvalues];
        }];
        
    }
}
- (void)showModal:(UIModalPresentationStyle) style style:(MPBCustomStyleSignatureViewController*) controller
{

    
    MPBCustomStyleSignatureViewController* signatureViewController = [controller initWithConfiguration:[MPBSignatureViewControllerConfiguration configurationWithFormattedAmount:@""]];
    signatureViewController.modalPresentationStyle = style;
    signatureViewController.strExcutedFrom=@"Waiting for Others";
    signatureViewController.gotParametersForInitiateWorkFlow =[NSMutableArray arrayWithObject:@"ME"];
    
    signatureViewController.CategoryId = _CategoryId;
    signatureViewController.Documentname =  _Documentname;
    signatureViewController.CategoryName = _CategoryName;
    signatureViewController.ConfigId = _ConfigId;
    signatureViewController.DocumentID = *(&(_DocumentID));
    signatureViewController.subscriberIdarray =_subscriberIdarray;
    signatureViewController.d = _d;
    
    signatureViewController.preferredContentSize = CGSizeMake(800, 500);
    signatureViewController.configuration.scheme = MPBSignatureViewControllerConfigurationSchemeAmex;
    // signatureViewController.signatureWorkFlowID = _workFlowID;
    signatureViewController.continueBlock = ^(UIImage *signature) {
        //[self showImage: signature];
    };
    signatureViewController.cancelBlock = ^ {
        
    };
    signatureViewController.delegate = self;
    [self presentViewController:signatureViewController animated:YES completion:nil];
    //[self.navigationController pushViewController:signatureViewController animated:true];
    
}
-(void)getSignersListToDisplay
{
        NSString *requestURL = [NSString stringWithFormat:@"https://sandboxapi.emsigner.com/api/GetAllSigners"];
    
        [WebserviceManager sendSyncRequestWithURLGet:requestURL method:SAServiceReqestHTTPMethodGET body:requestURL completionBlock:^(BOOL status, id responseValue) {
            if(status)
            {
                dispatch_async(dispatch_get_main_queue(),
                               ^{
    
    
                                   _holdSignersList = [responseValue valueForKey:@"Response"];
                                    [self.signersList reloadData];
                                   //NSLog(@"%@"_holdSignersListt);
    
                               });
            }
            else{
    
    
                UIAlertController * alert = [UIAlertController
                                             alertControllerWithTitle:nil
                                             message:@"Your emsigner account is no longer active.Please login again"
                                             preferredStyle:UIAlertControllerStyleAlert];
    
                //Add Buttons
    
                UIAlertAction* yesButton = [UIAlertAction
                                            actionWithTitle:@"Ok"
                                            style:UIAlertActionStyleDefault
                                            handler:nil ];
    
                [alert addAction:yesButton];
    
                [self presentViewController:alert animated:YES completion:nil];
    
                return;
            }
    
    
        }];
    
    
    
}

-(void)sendsign:(NSMutableDictionary *)signdict
{
    [self dismissViewControllerAnimated:true completion:^{
        [_delegate sendDataTosigners:self.d :signdict];

    }];
}

#pragma mark - Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    
    if (self.signersCount > 0) {
        self.signersList.backgroundView = nil;
        return self.signersCount;
    } else {
        UILabel *messageLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, self.view.bounds.size.width, self.view.bounds.size.height)];
        
        messageLabel.text = @"Retrieving data.\nPlease wait.";
        messageLabel.numberOfLines = 0;
        messageLabel.textAlignment = NSTextAlignmentCenter;
        messageLabel.font = [UIFont fontWithName:@"Helvetica Neue" size:20];
        [messageLabel sizeToFit];
        self.signersList.backgroundView = messageLabel;
        
        return 0;
    }
}
- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
    if (self.signersCount) {
        return [@"Signatory " stringByAppendingFormat:@"%ld ",(long)section+1];
    }else return @"";
}

- (CGFloat) tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section; {
    return 44.0;
}

- (void)tableView:(UITableView *)tableView willDisplayHeaderView:(UIView *)view forSection:(NSInteger)section {
    // recast your view as a UITableViewHeaderFooterView
    UITableViewHeaderFooterView *header = (UITableViewHeaderFooterView *)view;
    header.contentView.backgroundColor = [UIColor lightGrayColor];
    header.textLabel.textColor = [UIColor whiteColor];
    UIImageView *viewWithTag = [self.view viewWithTag:kHeaderSectionTag + section];
    if (viewWithTag) {
        [viewWithTag removeFromSuperview];
    }
    // add the arrow image
    
//    NSArray * arr = [NSArray arrayWithObjects:[self.sectionItems objectAtIndex:section], nil];
    if (_signersCount >0)
    {
        CGSize headerFrame = self.view.frame.size;
        UIImageView *theImageView = [[UIImageView alloc] initWithFrame:CGRectMake(headerFrame.width - 32, 13, 18, 18)];
        theImageView.image = [UIImage imageNamed:@"Expand Arrow-25"];
        theImageView.tag = kHeaderSectionTag + section;
        [header addSubview:theImageView];
        
        // make headers touchable
        header.tag = section;
        UITapGestureRecognizer *headerTapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(sectionHeaderWasTouched:)];
        [header addGestureRecognizer:headerTapGesture];
    }
}
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if (self.expandedSectionHeaderNumber == section) {
     
        return self.holdSignersList.count;
    } else {
        return 0;
    }
}

// Row display. Implementers should *always* try to reuse cells by setting each cell's reuseIdentifier and querying for available reusable cells with dequeueReusableCellWithIdentifier:
// Cell gets various attributes set automatically based on table (separators) and data source (accessory views, editing controls)

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    SignerListCell *cell = [tableView dequeueReusableCellWithIdentifier:@"SignerListCell" forIndexPath:indexPath];
    NSArray *section = [self.holdSignersList objectAtIndex:indexPath.row];
    

    cell.textLabel.text = [section valueForKey:@"Name"];
    cell.detailTextLabel.text = [section valueForKey:@"EmailId"];
//    cell.textLabel.text = [@"Signatory " stringByAppendingFormat:@"%ld ",(long)indexPath.row+1];

       return cell;
    
}
#pragma mark - Expand / Collapse Methods

- (void)sectionHeaderWasTouched:(UITapGestureRecognizer *)sender {
    UITableViewHeaderFooterView *headerView = (UITableViewHeaderFooterView *)sender.view;
    NSInteger section = headerView.tag;
    UIImageView *eImageView = (UIImageView *)[headerView viewWithTag:kHeaderSectionTag + section];
    self.expandedSectionHeader = headerView;
    
    if (self.expandedSectionHeaderNumber == -1) {
        self.expandedSectionHeaderNumber = section;
        [self tableViewExpandSection:section withImage: eImageView];
       
    } else {
        if (self.expandedSectionHeaderNumber == section) {
            [self tableViewCollapeSection:section withImage: eImageView];
            self.expandedSectionHeader = nil;
        } else {
            UIImageView *cImageView  = (UIImageView *)[self.view viewWithTag:kHeaderSectionTag + self.expandedSectionHeaderNumber];
            [self tableViewCollapeSection:self.expandedSectionHeaderNumber withImage: cImageView];
            [self tableViewExpandSection:section withImage: eImageView];
        }
    }
}

- (void)tableViewCollapeSection:(NSInteger)section withImage:(UIImageView *)imageView {
    NSArray *sectionData = [self.holdSignersList objectAtIndex:section];
    
    self.expandedSectionHeaderNumber = -1;
    if (self.holdSignersList.count == 0) {
        return;
    } else {
        [UIView animateWithDuration:0.4 animations:^{
            imageView.transform = CGAffineTransformMakeRotation((0.0 * M_PI) / 180.0);
        }];
        NSMutableArray *arrayOfIndexPaths = [NSMutableArray array];
        for (int i=0; i< self.holdSignersList.count; i++) {
            NSIndexPath *index = [NSIndexPath indexPathForRow:i inSection:section];
            [arrayOfIndexPaths addObject:index];
        }
        
        [self.signersList beginUpdates];
        [self.signersList deleteRowsAtIndexPaths:arrayOfIndexPaths withRowAnimation: UITableViewRowAnimationFade];
        [self.signersList endUpdates];
    }
}

- (void)tableViewExpandSection:(NSInteger)section withImage:(UIImageView *)imageView {
   // NSArray *sectionData = [self.holdSignersList objectAtIndex:section];
    if (self.holdSignersList.count == 0) {
        self.expandedSectionHeaderNumber = -1;
        return;
    } else {
        [UIView animateWithDuration:0.4 animations:^{
            imageView.transform = CGAffineTransformMakeRotation((180.0 * M_PI) / 180.0);
        }];
        NSMutableArray *arrayOfIndexPaths = [NSMutableArray array];
        for (int i=0; i< self.holdSignersList.count; i++) {
            NSIndexPath *index = [NSIndexPath indexPathForRow:i inSection:section];
            [arrayOfIndexPaths addObject:index];
        }
        self.expandedSectionHeaderNumber = section;
        [self.signersList beginUpdates];
        [self.signersList insertRowsAtIndexPaths:arrayOfIndexPaths withRowAnimation: UITableViewRowAnimationFade];
        [self.signersList endUpdates];
    }
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    //titleForHeaderInSection
   Subscriberdictionary = [[NSMutableDictionary alloc]init];
    NSString * namestring = [[self.holdSignersList objectAtIndex:indexPath.row]valueForKey:@"Name"];
     SubscriberId = [[self.holdSignersList objectAtIndex:indexPath.row]valueForKey:@"SubscriberId"];
    [Subscriberdictionary setObject:SubscriberId forKey:@"SubscriberId"];
    [Subscriberdictionary setObject:@"" forKey:@"SignatureImage"];
    [_subscriberIdarray replaceObjectAtIndex:indexPath.section withObject:Subscriberdictionary];
    NSInteger secti = self.expandedSectionHeaderNumber;
    
    UIImageView *cImageView  = (UIImageView *)[self.view viewWithTag:kHeaderSectionTag + self.expandedSectionHeaderNumber];
    [self tableViewCollapeSection:self.expandedSectionHeaderNumber withImage: cImageView];
    [tableView headerViewForSection:secti].textLabel.text = namestring;

//    [self.d  addObject: @[ @{ @"signatory": [tableView headerViewForSection:indexPath.section].textLabel.text , @"section":[NSString stringWithFormat:@"%ld",(long)secti]},
//                           ]];
  
//   arr = [[NSMutableArray alloc]init];
//
//  arr1 = [[NSMutableArray alloc]init];
//
//
//    if (secti == 0) {
//
//         [arr addObject:namestring];
//    }
//    else
//    {
//
//        [arr1 addObject:namestring];
//    }

    
    
}
/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

@end
