//
//  ShowEditImagesFromImageList.m
//  emSigner
//
//  Created by Emudhra on 23/10/18.
//  Copyright Â© 2018 Emudhra. All rights reserved.
//

#import "ShowEditImagesFromImageList.h"
#import "MultipleImagesCell.h"
#import "SignersInformation.h"
#import "UploadDocuments.h"
#import <CoreData/CoreData.h>
#import "Documents+CoreDataProperties.h"



@interface ShowEditImagesFromImageList ()
{
    int currentPreviewIndex;
    NSString *pdfFileName;
    NSString *meta;
}

@end

@implementation ShowEditImagesFromImageList
- (void)setDetailItem:(id)newDetailItem {
    if (_detailItem !=
        newDetailItem) {
        _detailItem = newDetailItem;
        
        // Update theview.
        
    }
}

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
  //  _showMultImages = [[NSMutableArray alloc] init];//WithObjects:_theImage,image,nil];
   // [_showMultImages addObject:_theImage ];

   // [_showImageFromListView setImage:_theImage];
    _docresponsearray = [[NSMutableArray alloc]init];
    self.showMultipleImages.delegate =self;
    self.showMultipleImages.dataSource = self;
    
    self.showMultipleImages.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
    
    [self.showMultipleImages registerNib:[UINib nibWithNibName:@"MultipleImagesCell" bundle:nil] forCellReuseIdentifier:@"MultipleImagesCell"];
    UIBarButtonItem *anotherButton1 = [[UIBarButtonItem alloc] initWithTitle:@"Save" style:UIBarButtonItemStylePlain target:self action:@selector(NextAction:)];
    
    
    
    self.navigationItem.rightBarButtonItems=@[anotherButton1];
   // _appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];

}

-(void) NextAction:(UIButton*)sender
{
    
    NSUserDefaults * prefs = [NSUserDefaults standardUserDefaults];
    NSString *  CategoryId = [[prefs valueForKey:@"workflowCategoryId"]stringValue];
    NSString * base64data = [self createPdfWithName:@"sam" array:[NSArray arrayWithArray:_showMultImages]];

    NSData *convertToByrtes = [NSData dataWithContentsOfFile:base64data];
    NSString *base64image=[convertToByrtes base64EncodedStringWithOptions:0];
    
    NSMutableDictionary * senddict = [[NSMutableDictionary alloc]init];
    NSInteger categoryid = [CategoryId integerValue];
    [senddict setValue:[NSNumber numberWithLong:categoryid] forKey:@"CategoryID"];
    //[senddict setValue:CategoryId forKey:@"CategoryID"];
    [senddict setValue:base64image forKey:@"Base64FileData"];
    [senddict setValue:_categoryname forKey:@"DocumentNumber"];
    [senddict setValue:_documentName forKey:@"DocumentName"];
    [senddict setValue:@"" forKey:@"OptionalParam1"];

 
    [_delegate sendDataToA:senddict];
    [self.navigationController popViewControllerAnimated:true];
    
}
//-(void)viewWillDisappear:(BOOL)animated
//{
//    [_delegate sendDataToA:_showMultImages];
//
//}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
- (IBAction)addMultipleDocs:(id)sender {

    UIImagePickerController *imagePickerController = [[UIImagePickerController alloc] init];
    imagePickerController.delegate = self;
    [imagePickerController setSourceType:UIImagePickerControllerSourceTypePhotoLibrary];

    [self presentViewController:imagePickerController animated:YES completion:nil];
    
}

- (NSString *)createPdfWithName: (NSString *)name array:(NSArray*)images
{
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *docspath = [paths objectAtIndex:0];
    pdfFileName = [docspath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@.pdf",name]];
    UIGraphicsBeginPDFContextToFile(pdfFileName, CGRectZero, nil);
    for (int index = 0; index <[images count] ; index++)
    {
        UIImage *pngImage=[[images objectAtIndex:index]valueForKey:@"Image"];
        UIImage *lowResImage = [UIImage imageWithData:UIImageJPEGRepresentation(pngImage, 0.02)];

//        UIGraphicsBeginPDFPageWithInfo(CGRectMake(0, 0, (pngImage.size.width), (pngImage.size.height)), nil);
//        [pngImage drawInRect:CGRectMake(0, 0, (pngImage.size.width), (pngImage.size.height))];
        UIGraphicsBeginPDFPageWithInfo(CGRectMake(0, 0, (lowResImage.size.width), (lowResImage.size.height)), nil);
        [lowResImage drawInRect:CGRectMake(0, 0, (lowResImage.size.width), (lowResImage.size.height))];
    }
    UIGraphicsEndPDFContext();
   
    
    NSUserDefaults *savePathForPdf = [NSUserDefaults standardUserDefaults];
    [savePathForPdf setObject:pdfFileName forKey:@"savedPathForPdf"];
    [savePathForPdf synchronize];
    
    
    
    return pdfFileName;
//    QLPreviewController *previewController=[[QLPreviewController alloc]init];
//    previewController.delegate=self;
//    previewController.dataSource=self;
    // [self presentModalViewController:previewController animated:YES];
    
//    [self presentViewController:previewController animated:YES completion:nil];
//    [previewController.navigationItem setRightBarButtonItem:nil];
    
    
//    NSData *data = [[NSData alloc]initWithContentsOfFile:pdfFileName];
////    // from your converted Base64 string
////    NSString *documentsDirectory = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)[0];
////    NSString *path = [documentsDirectory stringByAppendingPathComponent:@"test.pdf"];
//    [data writeToFile:pdfFileName atomically:YES];
////
//    MuDocRef *doc;
//
//    doc = [[MuDocRef alloc] initWithFilename:pdfFileName];
//    if (!doc) {
//        NSLog(@"Cannot open document '%@'", pdfFileName);
//        //return YES;
//    }
//
//
//   // return pdfFileName;
//    //PreviewImageAsPdf *passimages = [[PreviewImageAsPdf alloc]initWithNibName:@"PreviewImageAsPdf" bundle:nil];
//    PreviewImageAsPdf *temp = [[PreviewImageAsPdf alloc] initWithFilename:pdfFileName path:pdfFileName document: doc];
//
//    temp.pdfPath = pdfFileName;
//    [self.navigationController pushViewController:temp animated:YES];
}



- (void) imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *,id> *)info {
    [self dismissViewControllerAnimated:picker completion:nil];
    //UIImage *image = [info valueForKey:UIImagePickerControllerOriginalImage];

//    [_showMultImages addObject:image];
//    [self.showMultipleImages reloadData];
    
    
    
   UIImage* imag = [info valueForKey:UIImagePickerControllerOriginalImage];
    UIImageView *  imageView ;
    imageView.image = imag;
    NSDictionary *metadataDictionary = (NSDictionary *)[info valueForKey:UIImagePickerControllerMediaMetadata];
    
    meta = [[[info objectForKey:UIImagePickerControllerMediaMetadata] objectForKey:@"{TIFF}"] objectForKey:@"DateTime"];

    if (meta == nil) {
        NSDateFormatter *form = [[NSDateFormatter alloc] init];
        form.dateFormat = @"yyyy:MM:dd HH:mm:ss";
        NSString* date = [form stringFromDate:[NSDate date]];
        [_showMultImages addObject:@{@"Image":imag,@"Date":date}];

    }
    else
    {
        [_showMultImages addObject:@{@"Image":imag,@"Date":meta}];
    }
//    Documents * document = [NSEntityDescription insertNewObjectForEntityForName:@"Documents"
//                                                         inManagedObjectContext:_appDelegate.managedObjectContext];
//    document.document = _showMultImages;
//    [_appDelegate saveContext];
 //   [[self navigationController] dismissViewControllerAnimated:YES completion:nil];
    [_showMultipleImages reloadData];
}


#pragma mark - tableview delegates and datasource


- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
   
    if (_showMultImages.count > 1) {
        self.showMultipleImages.hidden = false;
    }
    else{
        self.showMultipleImages.hidden = true;
    }
     return _showMultImages.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    
    MultipleImagesCell *cell = [tableView dequeueReusableCellWithIdentifier:@"MultipleImagesCell" forIndexPath:indexPath];
    [self.showImageFromListView setImage:[[_showMultImages objectAtIndex:indexPath.row]valueForKey:@"Image"]];

    for(int i=0; i<[_showMultImages count];i++) {
        cell.imagesMultiple.image = [[_showMultImages objectAtIndex:indexPath.row]valueForKey:@"Image"];
    }
    
    return cell;
    
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return 200;
}


- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath {
    return YES;
}

- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        [_showMultImages removeObjectAtIndex:indexPath.row];
         [_showImageFromListView setImage:[[_showMultImages objectAtIndex:0]valueForKey:@"Image"]];
        
        [tableView reloadData]; // tell table to refresh now
    }
}


/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/
- (IBAction)preview:(id)sender {
     [self createPdfWithName:@"sam" array:[NSArray arrayWithArray:_showMultImages]];
}



#pragma mark - data source(Preview)

- (NSInteger)numberOfPreviewItemsInPreviewController:(QLPreviewController *)controller
{
    //return [_showMultImages count];
    return 1;
}

- (id <QLPreviewItem>)previewController:(QLPreviewController *)controller previewItemAtIndex:(NSInteger)index
{
    NSString *fileName = pdfFileName;//[_showMultImages objectAtIndex:index];
    return [NSURL fileURLWithPath:fileName];
}

#pragma mark - delegate methods


- (BOOL)previewController:(QLPreviewController *)controller shouldOpenURL:(NSURL *)url forPreviewItem:(id <QLPreviewItem>)item
{
    return YES;
}

- (CGRect)previewController:(QLPreviewController *)controller frameForPreviewItem:(id <QLPreviewItem>)item inSourceView:(UIView **)view
{
    
    //Rectangle of the button which has been pressed by the user
    //Zoom in and out effect appears to happen from the button which is pressed.
    UIView *view1 = [self.view viewWithTag:currentPreviewIndex+1];
    return view1.frame;
}



@end
