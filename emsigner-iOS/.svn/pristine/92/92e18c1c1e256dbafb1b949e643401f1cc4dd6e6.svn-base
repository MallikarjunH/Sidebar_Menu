//
//  PendingListVC.m
//  emSigner
//
//  Created by Administrator on 12/2/16.
//  Copyright Â© 2016 Emudhra. All rights reserved.
//

#import "PendingListVC.h"
#import "MPBSignatureViewController.h"
#import <QuartzCore/QuartzCore.h>
#import "MBProgressHUD.h"
#import "NSObject+Activity.h"
#import "HoursConstants.h"
#import "WebserviceManager.h"
#import "UITextView+Placeholder.h"
#import "LMNavigationController.h"
#import "ListPdfViewer.h"
#import "MultiplePdfViewerVC.h"
#import "DocStoreVC.h"

#import <LocalAuthentication/LocalAuthentication.h>


#include "mupdf/common.h"
#import "mupdf/MuPageViewNormal.h"
#import "mupdf/MuPageViewReflow.h"
#import "mupdf/MuTextFieldController.h"
#import "mupdf/MuChoiceFieldController.h"
#import "mupdf/MuPrintPageRenderer.h"

#define GAP 5

@interface PendingListVC ()<CellPopUp>
{
    int currentPreviewIndex;
    CustomPopOverVC *popVC;
}
@property BOOL fieldShown;
@property (strong, nonatomic) UIImageView* backgroundView;
@property (nonatomic, strong) UITextView *shareTextView;
@property (nonatomic, strong) UITextView *declineTextView;
@end
//Save the first touch point
CGPoint firstTouchPoint;
float xd;
float yd;
@implementation PendingListVC

enum
{
    ResourceCacheMaxSize = 128<<20	/**< use at most 128M for resource cache */
};

fz_document *doc;
MuDocRef *docRef;
NSString *key;
NSString *_filePath;
BOOL reflowMode;
UIScrollView *canvasScrollView;
UIBarButtonItem *backButton;
int barmode;
int searchPage;
int cancelSearch;
int showLinks;
int width; // current screen size
int height;
int current; // currently visible page
int scroll_animating; // stop view updates during scrolling animations
float scale; // scale applied to views (only used in reflow mode)
BOOL _isRotating;

- (id)init
{
    self = [super init];
    if (self) {
        self.fieldShown = false;
    }
    return self;
}
- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
     _addFile = [[NSMutableArray alloc] init];
    //
    
  //  _signatorylbl.text = _signatoryString;
    
    if (self.signatoryString != nil) {
        self.signatorylbl.text =[NSString stringWithFormat:@"%@",self.signatoryString];
    }
    [self.signatorylbl sizeToFit];

    UIView *view = [[UIView alloc] initWithFrame: CGRectZero];
    view.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    [view setAutoresizesSubviews: YES];
    view.backgroundColor = [UIColor grayColor];
    
    canvasScrollView = [[UIScrollView alloc] initWithFrame: CGRectMake(2,0,self.pdfView.bounds.size.width, self.pdfView.bounds.size.height)];
    canvasScrollView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    [canvasScrollView setPagingEnabled: YES];
    [canvasScrollView setShowsHorizontalScrollIndicator: NO];
    [canvasScrollView setShowsVerticalScrollIndicator: NO];
    canvasScrollView.delegate = self;
    [self.pdfView addSubview: canvasScrollView];
    //

    UIButton* customButton = [UIButton buttonWithType:UIButtonTypeCustom];
    [customButton setImage:[UIImage imageNamed:@"three-aligned-squares-in-vertical-line"] forState:UIControlStateNormal];
    [customButton sizeToFit];
    UIBarButtonItem* customBarButtonItem = [[UIBarButtonItem alloc] initWithCustomView:customButton];
    [customButton addTarget:self
                     action:@selector(flipView:)
           forControlEvents:UIControlEventTouchUpInside];
    
    self.navigationItem.rightBarButtonItem = customBarButtonItem;
    
    UIButton* customButton1 = [UIButton buttonWithType:UIButtonTypeCustom];
    [customButton1 setImage:[UIImage imageNamed:@"ico-back-24.png"] forState:UIControlStateNormal];
    [customButton1 sizeToFit];
    UIBarButtonItem* customBarButtonItem1 = [[UIBarButtonItem alloc] initWithCustomView:customButton1];
    [customButton1 addTarget:self
                      action:@selector(popViewControllerAnimated:)
            forControlEvents:UIControlEventTouchUpInside];
    
    self.navigationItem.leftBarButtonItem = customBarButtonItem1;
    
    if ([_documentCount intValue] > 1) {
        customButton.hidden = NO;
    }
    else if ([_attachmentCount intValue] > 0)
    {
        customButton.hidden = NO;
    }
    else{
        customButton.hidden = YES;
    }
    
    [[self signatureImageView]setUserInteractionEnabled:YES];
}

- (instancetype) initWithFilename: (NSString*)filename path:(NSString *)cstr document: (MuDocRef *)aDoc
{
    self = [super initWithNibName:nil bundle:nil];
    if (!self)
        return nil;
    
#if __IPHONE_OS_VERSION_MAX_ALLOWED >= 70000
    if ([self respondsToSelector:@selector(automaticallyAdjustsScrollViewInsets)])
        self.automaticallyAdjustsScrollViewInsets = NO;
#endif
     key = [filename copy];
    docRef = aDoc;
    doc = docRef->doc;
    _filePath = [cstr copy];
    
    //  this will be created right before the outline is shown
    //outline = nil;
    
    dispatch_sync(queue, ^{});
    
    return self;
}

- (void) viewWillLayoutSubviews
{
    CGSize size = canvasScrollView.frame.size;
    
    width = size.width;
    height = size.height;
    
    canvasScrollView.contentInset = UIEdgeInsetsZero;
    canvasScrollView.contentSize = CGSizeMake(fz_count_pages(ctx, doc) * width, height);
    canvasScrollView.contentOffset = CGPointMake(current * width, 0);
    
    for (UIView<MuPageView> *view in canvasScrollView.subviews) {
        if (view.number == current) {
            view.frame = CGRectMake(view.number * width, 0, width-GAP, height);
            [view willRotate];
        }
    }
    for (UIView<MuPageView> *view in canvasScrollView.subviews) {
        if (view.number != current) {
            view.frame = CGRectMake(view.number * width, 0, width-GAP, height);
            [view willRotate];
        }
    }
}



- (void) viewDidAppear: (BOOL)animated
{
    [super viewDidAppear:animated];
    [self scrollViewDidScroll: canvasScrollView];
}
- (void) gotoPage: (int)number animated: (BOOL)animated
{
    if (number < 0)
        number = 0;
    if (number >= fz_count_pages(ctx, doc))
        number = fz_count_pages(ctx, doc) - 1;
    if (current == number)
        return;
    if (animated) {
        // setContentOffset:animated: does not use the normal animation
        // framework. It also doesn't play nice with the tap gesture
        // recognizer. So we do our own page flipping animation here.
        // We must set the scroll_animating flag so that we don't create
        // or remove subviews until after the animation, or they'll
        // swoop in from origo during the animation.
        
        scroll_animating = YES;
        [UIView beginAnimations: @"MuScroll" context: NULL];
        [UIView setAnimationDuration: 0.4];
        [UIView setAnimationBeginsFromCurrentState: YES];
        [UIView setAnimationDelegate: self];
        [UIView setAnimationDidStopSelector: @selector(onGotoPageFinished)];
        
        for (UIView<MuPageView> *view in canvasScrollView.subviews)
            [view resetZoomAnimated: NO];
        
        canvasScrollView.contentOffset = CGPointMake(number * width, 0);
        
        [UIView commitAnimations];
    } else {
        for (UIView<MuPageView> *view in canvasScrollView.subviews)
            [view resetZoomAnimated: NO];
        canvasScrollView.contentOffset = CGPointMake(number * width, 0);
    }
    current = number;
}


- (void) onGotoPageFinished
{
    scroll_animating = NO;
    [self scrollViewDidScroll: canvasScrollView];
}


- (void) resetSearch
{
    searchPage = -1;
    for (UIView<MuPageView> *view in canvasScrollView
         .subviews)
        [view clearSearchResults];
}
- (void) scrollViewDidScroll: (UIScrollView*)scrollview
{
    if (_isRotating)
        return;
    
    if (width == 0)
        return; // not visible yet
    
    if (scroll_animating)
        return; // don't mess with layout during animations
    
    float x = canvasScrollView.contentOffset.x + width * 0.5f;    current = x / width;

    // swap the distant page views out
    
    NSMutableSet *invisiblePages = [[NSMutableSet alloc] init];
    for (UIView<MuPageView> *view in canvasScrollView.subviews) {
        if (view.number != current)
            [view resetZoomAnimated: YES];
        if (view.number < current - 2 || view.number > current + 2)
            [invisiblePages addObject: view];
    }
    for (UIView<MuPageView> *view in invisiblePages)
        [view removeFromSuperview];
    //[invisiblePages release]; // don't bother recycling them...
    
    [self createPageView: current];
    [self createPageView: current - 1];
    [self createPageView: current + 1];
    
    // reset search results when page has flipped
    if (current != searchPage)
        [self resetSearch];
}


- (void) createPageView: (int)number
{
    
    if (number < 0 || number >= fz_count_pages(ctx, doc))
        return;
    int found = 0;
    for (UIView<MuPageView> *view in canvasScrollView.subviews)
        if (view.number == number)
            found = 1;
    if (!found) {
        UIView<MuPageView> *view
        = reflowMode
        ? [[MuPageViewReflow alloc] initWithFrame:CGRectMake(number * width, 0, width-GAP, height) document:docRef page:number]
        : [[MuPageViewNormal alloc] initWithFrame:CGRectMake(number * width, 0, width-GAP, height) dialogCreator:self updater:self document:docRef page:number];
        [view setScale:scale];
        [canvasScrollView addSubview: view];
        if (showLinks)
            [view showLinks];
        //[view release];
    }
    
}


-(void)viewWillAppear:(BOOL)animated
{
    current=0;
    self.title = _myTitle;
    [self.navigationController.navigationBar setTitleTextAttributes:
     @{NSForegroundColorAttributeName:[UIColor whiteColor]}];
    
}


-(void)flipView:(UIButton*)sender
{
    
    if ([_documentCount isEqualToString:@"1"] && _attachmentCount>0) {
        UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
        popVC = [newStoryBoard instantiateViewControllerWithIdentifier:@"CustomPopOverVC"];
        UINavigationController *popNav = [[UINavigationController alloc]initWithRootViewController: popVC];
        popVC.delegate = self;
        popVC.preferredContentSize = CGSizeMake(200,8);
        popVC.attachmentCount = _attachmentCount;
        popVC.documentCount = _documentCount;
        popVC.workflowID =_workFlowID;
        popNav.modalPresentationStyle = UIModalPresentationPopover;
        _popover = popNav.popoverPresentationController;
        _popover.delegate = self;
        _popover.sourceView = self.view;
        CGRect frame = [sender frame];
        frame.origin.y = self.view.frame.origin.y - frame.size.height - 25;
        frame.origin.x =  self.view.frame.size.width - frame.size.width +20;
        _popover.sourceRect = frame;
        popNav.navigationBarHidden = YES;
        [self presentViewController: popNav animated:YES completion:nil];

    }
    
    else{
        if ([_attachmentCount intValue ]>0) {
            UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
            popVC = [newStoryBoard instantiateViewControllerWithIdentifier:@"CustomPopOverVC"];
            UINavigationController *popNav = [[UINavigationController alloc]initWithRootViewController: popVC];
            popVC.delegate = self;
            popVC.preferredContentSize = CGSizeMake(200,60);
            popVC.attachmentCount = _attachmentCount;
            popVC.documentCount = _documentCount;
            popVC.workflowID =_workFlowID;
            popNav.modalPresentationStyle = UIModalPresentationPopover;
            _popover = popNav.popoverPresentationController;
            _popover.delegate = self;
            _popover.sourceView = self.view;
            CGRect frame = [sender frame];
            frame.origin.y = self.view.frame.origin.y - frame.size.height - 25;
            frame.origin.x =  self.view.frame.size.width - frame.size.width +20;
            _popover.sourceRect = frame;
            popNav.navigationBarHidden = YES;
            [self presentViewController: popNav animated:YES completion:nil];

        }
        else{
            UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
            popVC = [newStoryBoard instantiateViewControllerWithIdentifier:@"CustomPopOverVC"];
            UINavigationController *popNav = [[UINavigationController alloc]initWithRootViewController: popVC];
            popVC.delegate = self;
            popVC.preferredContentSize = CGSizeMake(200,8);
            popVC.attachmentCount = _attachmentCount;
            popVC.documentCount = _documentCount;
            popVC.workflowID =_workFlowID;
            popNav.modalPresentationStyle = UIModalPresentationPopover;
            _popover = popNav.popoverPresentationController;
            _popover.delegate = self;
            _popover.sourceView = self.view;
            CGRect frame = [sender frame];
            frame.origin.y = self.view.frame.origin.y - frame.size.height - 25;
            frame.origin.x =  self.view.frame.size.width - frame.size.width +20;

            _popover.sourceRect = frame;
            popNav.navigationBarHidden = YES;
            [self presentViewController: popNav animated:YES completion:nil];

        }
        
    }
}

-(void)popViewControllerAnimated:(UIButton*)sender
{
    
    if ([self.strExcutedFrom isEqualToString:@"DocsStore"])
    {
        [self.navigationController popToViewController:[self.navigationController.viewControllers objectAtIndex:1] animated:YES];
        
    }
    else{
        //[self.navigationController popToRootViewControllerAnimated:YES];
        [self.navigationController popViewControllerAnimated:YES];
    }
    
}

-(void)dissmissCellPopup:(NSInteger)row{
    switch (row) {
        case 0:
        {
            [self dismissViewControllerAnimated:NO completion:nil];
            UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
            MultiplePdfViewerVC *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"MultiplePdfViewerVC"];
            objTrackOrderVC.delegate = self;
            objTrackOrderVC.workFlowId = _workFlowID;
            objTrackOrderVC.currentSelectedRow = _selectedIndex;
            objTrackOrderVC.strExcutedFrom = _strExcutedFrom;
            objTrackOrderVC.document = @"Documents";
            [self.navigationController pushViewController:objTrackOrderVC animated:YES];
        }
            
            break;
        case 1:
        {
            [self dismissViewControllerAnimated:NO completion:nil];
            UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
            AttachedVC *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"AttachedVC"];
            objTrackOrderVC.workFlowId = _workFlowID;
            objTrackOrderVC.documentID = _documentID;
            objTrackOrderVC.currentSelectedRow = _selectedIndex;
            objTrackOrderVC.document = @"Attached Documents";
            
            [self.navigationController pushViewController:objTrackOrderVC animated:YES];
        }
            
            break;
      
            
        default:
            break;
    }

}

#pragma mark == UIPopoverPresentationControllerDelegate ==
- (UIModalPresentationStyle)adaptivePresentationStyleForPresentationController:(UIPresentationController *)controller
{
    return UIModalPresentationNone;
}


-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
    UITouch* bTouch = [touches anyObject];
    if ([bTouch.view isEqual:[self signatureImageView]]) {
        firstTouchPoint = [bTouch locationInView:[self view]];
        xd = firstTouchPoint.x - [[bTouch view]center].x;
        yd = firstTouchPoint.y - [[bTouch view]center].y;
    }
}


-(void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
    UITouch* mTouch = [touches anyObject];
    if (mTouch.view == [self signatureImageView]) {
        CGPoint cp = [mTouch locationInView:[self view]];
        [[mTouch view]setCenter:CGPointMake(cp.x-xd, cp.y-yd)];
        [[self signatureImageView]setUserInteractionEnabled:NO];
    }
}
//
- (void)dataFromController:(NSString *)data
{
    
    _multiplePdfImagedetail=data;
}

-(void)dataFordocumentName:(NSString *)dName
{
    _myTitle=dName;
}

-(void)dataForWorkflowId:(NSString *)dWorkflowid
{
    _documentID = dWorkflowid;
}

-(void)selectedCellIndex:(int)iIndex
{
    _selectedIndex = iIndex;
     NSLog(@"Selcted Index is %lu",(unsigned long)iIndex);
}
//



- (void)dataFromControllerAttachOne:(NSString *)data{
    _multiplePdfImagedetail=data;
}
-(void)dataFordocumentNameAttachOne:(NSString *)dName{
    _myTitle=dName;
}
-(void)dataForWorkflowIdAttachOne:(NSString *)dWorkflowid{
    _documentID = dWorkflowid;
}


//implementation of delegate method
- (void)showModal:(UIModalPresentationStyle) style style:(MPBCustomStyleSignatureViewController*) controller
{
                                        MPBCustomStyleSignatureViewController* signatureViewController = [controller initWithConfiguration:[MPBSignatureViewControllerConfiguration configurationWithFormattedAmount:@""]];
                                        signatureViewController.modalPresentationStyle = style;
                                        signatureViewController.strExcutedFrom=@"Waiting for Others";
                                        signatureViewController.preferredContentSize = CGSizeMake(800, 500);
                                        signatureViewController.configuration.scheme = MPBSignatureViewControllerConfigurationSchemeAmex;
                                        signatureViewController.signatureWorkFlowID = _workFlowID;
                                        signatureViewController.continueBlock = ^(UIImage *signature) {
                                            [self showImage: signature];
                                        };
                                        signatureViewController.cancelBlock = ^ {
                                            
                                        };
                                        [self presentViewController:signatureViewController animated:YES completion:nil];

}

- (void) showImage: (UIImage*) signature {
    self.signatureImageView.image = signature;
    self.signatureImageView.contentMode = UIViewContentModeScaleAspectFit;
    
    self.signatureImageView.layer.borderColor = [UIColor yellowColor].CGColor;
    self.signatureImageView.layer.borderWidth = 2.0f;
}

-(BOOL)IsValidEmail:(NSString *)checkString
{
    BOOL isvalidate;
    NSString *emailRegEx = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegEx];
    //Valid email address
    
    if ([emailTest evaluateWithObject:checkString] == YES)
    {
        isvalidate = YES;
        //Do Something
    }
    else
    {
        isvalidate = NO;
        //NSLog(@"email not in proper format");
    }
    return isvalidate;
}



- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}


- (IBAction)SignBtnClicked:(id)sender
{
//    UIActionSheet *actionSheet3 = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:@"Cancel" destructiveButtonTitle:nil otherButtonTitles:@"eSignature", nil];
//    actionSheet3.tag = 103;
//    [actionSheet3 showInView:self.view];
    
    [self showModal:UIModalPresentationFullScreen style:[MPBDefaultStyleSignatureViewController alloc]];
    
}

- (IBAction)declineBtnClicked:(id)sender
{
    UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
    DeclineVC *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"DeclineVC"];
    self.definesPresentationContext = YES; //self is presenting view controller
    objTrackOrderVC.modalPresentationStyle = UIModalPresentationOverCurrentContext;
    objTrackOrderVC.workflowID = _workFlowID;
    [self.navigationController presentViewController:objTrackOrderVC animated:YES completion:nil];
}

- (IBAction)moreBtnClicked:(id)sender
{
//    UIActionSheet *actionSheet4 = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:@"Cancel" destructiveButtonTitle:nil otherButtonTitles:@"Share Document",@"Download Document",@"Document Log", nil];
//     [Share setValue:kCAAlignmentLeft forKey:@"titleTextAlignment"];
//    actionSheet4.tag = 104;
//    [actionSheet4 showInView:self.view];
    
    UIAlertController * view=   [[UIAlertController
                                  alloc]init];
    UIAlertAction* Doclog = [UIAlertAction
                             actionWithTitle:@"Document log"
                             style:UIAlertActionStyleDefault
                             handler:^(UIAlertAction * action)
                             {
                                 UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
                                 DocumentLogVC *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"DocumentLogVC"];
                                 
                                 objTrackOrderVC.workflowID = _workFlowID;
                                 [self.navigationController pushViewController:objTrackOrderVC animated:YES];
                             }];
    UIAlertAction* Download = [UIAlertAction
                               actionWithTitle:@"Download Document"
                               style:UIAlertActionStyleDefault
                               handler:^(UIAlertAction * action)
                               {
                                   UIAlertView *alertView32 = [[UIAlertView alloc] initWithTitle:@"Download"
                                                                                         message:@"Do you want to download document?"
                                                                                        delegate:self
                                                                               cancelButtonTitle:@"Yes"
                                                                               otherButtonTitles:@"No", nil];
                                   alertView32.tag = 32;
                                   [alertView32 show];
                                   
                               }];
    UIAlertAction* Share = [UIAlertAction
                            actionWithTitle:@"Share Document"
                            style:UIAlertActionStyleDefault
                            handler:^(UIAlertAction * action)
                            {
                                NSString *pendingdocumentName =_myTitle;
                                NSString *pendingWorkflowID =_workFlowID;
                                UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
                                ShareVC *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"ShareVC"];
                                objTrackOrderVC.documentName = pendingdocumentName;
                                objTrackOrderVC.workflowID = pendingWorkflowID;
                                [self.navigationController pushViewController:objTrackOrderVC animated:YES];
                                
                            }];
    UIAlertAction* cancel = [UIAlertAction
                             actionWithTitle:@"Cancel"
                             style:UIAlertActionStyleDestructive
                             handler:^(UIAlertAction * action)
                             {
                                 // [self.view dis]
                             }];
    
    [Share setValue:[[UIImage imageNamed:@"share-variant.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] forKey:@"image"];
    [Download setValue:[[UIImage imageNamed:@"download.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] forKey:@"image"];
    [Doclog setValue:[[UIImage imageNamed:@"stack-exchange.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] forKey:@"image"];
    
    [Share setValue:kCAAlignmentLeft forKey:@"titleTextAlignment"];
    [Download setValue:kCAAlignmentLeft forKey:@"titleTextAlignment"];
    [Doclog setValue:kCAAlignmentLeft forKey:@"titleTextAlignment"];
    
    view.view.tintColor = [UIColor colorWithRed:102.0/255.0 green:102.0/255.0 blue:102.0/255.0 alpha:1.0];
    [view addAction:Share];
    [view addAction:Download];
    [view addAction:Doclog];
    
    [view addAction:cancel];
    
    [self presentViewController:view animated:YES completion:nil];
    
}
/*****************************AlertView********************************/

- (BOOL)alertViewShouldEnableFirstOtherButton:(UIAlertView *)alertView
{
    UIAlertViewStyle style = alertView.alertViewStyle;
    
    if ((style == UIAlertViewStyleSecureTextInput) ||
        (style == UIAlertViewStylePlainTextInput) ||
        (style == UIAlertViewStyleLoginAndPasswordInput))
    {
        UITextField *textField = [alertView textFieldAtIndex:0];
        if ([textField.text length] == 0)
        {
            return NO;
        }
    }
    
    return YES;
    
}


- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    /*********************************GetOTP***********************************/
    
    if (alertView.tag == 12)
    {
        if (buttonIndex == 1)
        {
            
            //Login
            UITextField *aadharNumber = [alertView textFieldAtIndex:0];
            NSLog(@"Aadhar Number: %@", aadharNumber.text);
            
            //Saving Aadhaar Number
            NSString *aadhaar = aadharNumber.text;
            [[NSUserDefaults standardUserDefaults] setObject:aadhaar forKey:@"Aadhaar Number"];
            [[NSUserDefaults standardUserDefaults] synchronize];
            //
            
            /*************************Web Service Get OTP*******************************/
            
            if ([aadharNumber text].length > 1)
            {
                [self startActivity:@"Loading..."];
                NSString *requestURL = [NSString stringWithFormat:@"%@GetOTP?AadhaarNumber=%@",kGetOTP,aadharNumber.text];
                
                [WebserviceManager sendSyncRequestWithURLGet:requestURL method:SAServiceReqestHTTPMethodGET body:requestURL completionBlock:^(BOOL status, id responseValue) {
                    
                    if(status)
                    {
                        dispatch_async(dispatch_get_main_queue(),
                                       ^{
                                           NSNumber * isSuccessNumber = (NSNumber *)[responseValue valueForKey:@"IsSuccess"];
                                           if([isSuccessNumber boolValue] == YES)
                                           {
                                               _otpArray =responseValue;
                                               
                                               UIAlertView *alert9 = [[UIAlertView alloc] initWithTitle:@"OTP"
                                                                                                message:@""
                                                                                               delegate:self
                                                                                      cancelButtonTitle:@"Cancel"
                                                                                      otherButtonTitles:@"Sign", nil];
                                               alert9.alertViewStyle = UIAlertViewStylePlainTextInput;
                                               [[alert9 textFieldAtIndex:0] setKeyboardType:UIKeyboardTypeNumberPad];
                                               [[alert9 textFieldAtIndex:0] becomeFirstResponder];
                                               [alert9 textFieldAtIndex:0].placeholder = @"Please enter OTP";
                                               [alert9 textFieldAtIndex:0].delegate = self;
                                               
                                               alert9.tag = 9;
                                               [alert9 show];
                                               [self stopActivity];
                                           }
                                           else{
                                               UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"" message:[[responseValue valueForKey:@"Messages"] objectAtIndex:0] delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                                               [alert show];
                                               [self stopActivity];
                                           }
                                           
                                           
                                       });
                        
                    }
                    else{
                        NSError *error = (NSError *)responseValue;
                        if (error) {
                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Info" message:@"Error from KSA Server" delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                            //_adharText.text = nil;
                            [alert show];
                            [self stopActivity];
                            return;
                        }
                        
                        
                  
                    }
                    [self stopActivity];
                }];
                /****************************************************************/
            }
            
            else{
                UIAlertView *ErrorAlert = [[UIAlertView alloc] initWithTitle:@""
                                                                     message:@"Please Enter Aadhaar Number" delegate:nil
                                                           cancelButtonTitle:@"OK"
                                                           otherButtonTitles:nil, nil];
                [ErrorAlert show];

            }
            
            
        }
        else if (buttonIndex == 1)
        {
            
        }
    }
    /***************************Aadhar based Sign**************************************/
    else if(alertView.tag == 9)
    {
        if (buttonIndex == 0) {
            UITextField *otp = [alertView textFieldAtIndex:0];
            NSLog(@"OTP: %@", otp.text);
            
            /*************************Web Service Get OTP*******************************/
            
            if ([otp text].length > 1)
            {
                [self startActivity:@"Refreshing"];
                
                NSString *post = [NSString stringWithFormat:@"AdhaarNumber=%@&OTP=%@&WorkFlowId=%@",[[NSUserDefaults standardUserDefaults]
                                                                                                     valueForKey:@"Aadhaar Number"],otp.text,_workFlowID];
                [WebserviceManager sendSyncRequestWithURL:keSign method:SAServiceReqestHTTPMethodPOST body:post completionBlock:^(BOOL status, id responseValue)
                 {
                     
                     if(status)
                     {
                         NSNumber * isSuccessNumber = (NSNumber *)[responseValue valueForKey:@"IsSuccess"];
                         if([isSuccessNumber boolValue] == YES)
                         {
                             dispatch_async(dispatch_get_main_queue(),
                                            ^{
                                                _signArray =[[responseValue valueForKey:@"Messages"] objectAtIndex:0];
                                                
                                                /*******************/
                                                UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
                                                LMNavigationController *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"HomeNavController"];
                                                [self presentViewController:objTrackOrderVC animated:YES completion:nil];
                                                //
                                                
                                                
                                                UIAlertView * alert15 =[[UIAlertView alloc ] initWithTitle:@"" message:[[responseValue valueForKey:@"Messages"] objectAtIndex:0] delegate:self cancelButtonTitle:@"OK" otherButtonTitles: nil];
                                                [alert15 show];
                                                
                                                [self stopActivity];
                                                
                                            });
                             
                             
                         }
                         
                         
                     }
                     else{
                         
                         
                     }
                     
                 }];
                /****************************************************************/

            }
            else
            {
                UIAlertView *ErrorAlert = [[UIAlertView alloc] initWithTitle:@""
                                                                     message:@"Please Enter OTP" delegate:nil
                                                           cancelButtonTitle:@"OK"
                                                           otherButtonTitles:nil, nil];
                [ErrorAlert show];
            }
            
        }
        else if (buttonIndex == 1)
        {
            
        }
        
    }
    

    
    /**********************Aadhar based Sign with Saved Aadhar*************************/
    else if(alertView.tag == 10)
    {
        if (buttonIndex == 0) {
            UITextField *otp = [alertView textFieldAtIndex:0];
            NSLog(@"OTP: %@", otp.text);
            
            /*************************Web Service Get OTP*******************************/
            
            if ([otp text].length > 1)
            {
                [self startActivity:@"Refreshing"];
                
                NSString *post = [NSString stringWithFormat:@"AdhaarNumber=%@&OTP=%@&WorkFlowId=%@",[[NSUserDefaults standardUserDefaults]
                                                                                                     valueForKey:@"SavedAadhaarNumber"],otp.text,_workFlowID];
                [WebserviceManager sendSyncRequestWithURL:keSign method:SAServiceReqestHTTPMethodPOST body:post completionBlock:^(BOOL status, id responseValue)
                 {
                     
                     if(status)
                     {
                         NSNumber * isSuccessNumber = (NSNumber *)[responseValue valueForKey:@"IsSuccess"];
                         if([isSuccessNumber boolValue] == YES)
                         {
                             dispatch_async(dispatch_get_main_queue(),
                                            ^{
                                                _signArray =[[responseValue valueForKey:@"Messages"] objectAtIndex:0];
                                                
                                                /*******************/
                                                UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
                                                LMNavigationController *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"HomeNavController"];
                                                [self presentViewController:objTrackOrderVC animated:YES completion:nil];
                                                //
                                                
                                                
                                                UIAlertView * alert15 =[[UIAlertView alloc ] initWithTitle:@"" message:[[responseValue valueForKey:@"Messages"] objectAtIndex:0] delegate:self cancelButtonTitle:@"OK" otherButtonTitles: nil];
                                                [alert15 show];
                                                
                                                [self stopActivity];
                                                
                                            });
                             
                             
                         }
                         
                         
                     }
                     else{
                         
                         
                     }
                     
                 }];
                /****************************************************************/
                
            }
            else
            {
                UIAlertView *ErrorAlert = [[UIAlertView alloc] initWithTitle:@""
                                                                     message:@"Please Enter OTP" delegate:nil
                                                           cancelButtonTitle:@"OK"
                                                           otherButtonTitles:nil, nil];
                [ErrorAlert show];
            }
            
        }
        else if (buttonIndex == 1)
        {
            
        }
        
    }
    

    /*****************************Download**************************************/
    
    else if (alertView.tag == 32)
    {
        if (buttonIndex == 0)
        {
            
            
            [self startActivity:@"Loading..."];
            
            NSString *requestURL = [NSString stringWithFormat:@"%@DownloadAllWorkflowDocumentsById?WorkFlowId=%@",kDownloadPdf,_workFlowID];
            [WebserviceManager sendSyncRequestWithURLGet:requestURL method:SAServiceReqestHTTPMethodGET body:requestURL completionBlock:^(BOOL status, id responseValue) {
                
                
                if(status)
                {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        
                        _pdfImageArray=[responseValue valueForKey:@"Response"];
                        if (_pdfImageArray != (id)[NSNull null])
                        {
                            [_addFile removeAllObjects];
                            for(int i=0; i<[_pdfImageArray count];i++)
                            {
                                
                                _pdfFileName = [[_pdfImageArray objectAtIndex:i] objectForKey:@"DocumentName"];
                                _pdfFiledata = [[_pdfImageArray objectAtIndex:i] objectForKey:@"Document"];
                                
                                NSData *data = [[NSData alloc]initWithBase64EncodedString:_pdfFiledata options:0];
                                NSString *documentsDirectory = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES)[0];
                                CFUUIDRef uuid = CFUUIDCreate(NULL);
                                CFStringRef uuidString = CFUUIDCreateString(NULL, uuid);
                                CFRelease(uuid);
                                NSString *uniqueFileName = [NSString stringWithFormat:@"%@%@%@%@",_pdfFileName,@"                                                 ",(__bridge NSString *)uuidString, _pdfFileName];
                                
                                
                                NSString *path = [documentsDirectory stringByAppendingPathComponent:uniqueFileName];
                                [_addFile addObject:path];
                                
                                [data writeToFile:path atomically:YES];

                                
                                if (i==_pdfImageArray.count-1)
                                {
                                    [self stopActivity];
                                    QLPreviewController *previewController=[[QLPreviewController alloc]init];
                                    previewController.delegate=self;
                                    previewController.dataSource=self;
                                    [self presentViewController:previewController animated:YES completion:nil];
                                    [previewController.navigationItem setRightBarButtonItem:nil];
                                }
                                
                            }

                        }
                        else{
                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"" message:@"Invalid Request" delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
                            [alert show];
                        }
                        
                        
                        
                        
                    });
                    
                }
                else{
                    
                    
                }
                
            }];
            
            
        }
        else if (buttonIndex == 1)
        {
            
        }
    }
 
}


#pragma mark - data source(Preview)
//Data source methods

- (NSInteger)numberOfPreviewItemsInPreviewController:(QLPreviewController *)controller
{
   return [_addFile count];
   
    
    
    //return 1;
}

- (id <QLPreviewItem>)previewController:(QLPreviewController *)controller previewItemAtIndex:(NSInteger)index
{
    NSString *fileName = [_addFile objectAtIndex:index];

    return [NSURL fileURLWithPath:fileName];
}

#pragma mark - delegate methods


- (BOOL)previewController:(QLPreviewController *)controller shouldOpenURL:(NSURL *)url forPreviewItem:(id <QLPreviewItem>)item
{
    return YES;
}

- (CGRect)previewController:(QLPreviewController *)controller frameForPreviewItem:(id <QLPreviewItem>)item inSourceView:(UIView **)view
{
    
    //Rectangle of the button which has been pressed by the user
    //Zoom in and out effect appears to happen from the button which is pressed.
    UIView *view1 = [self.view viewWithTag:currentPreviewIndex+1];
    return view1.frame;
}

/**********************ActionSheet Delegate****************************/
-(void) actionSheet: (UIActionSheet *)actionSheet didDismissWithButtonIndex:(NSInteger)buttonIndex
{
    dispatch_async(dispatch_get_main_queue(), ^{
        if(actionSheet.tag == 104) {
            //do something
            switch (buttonIndex) {
                case 0: {
                    
                    NSString *pendingdocumentName =_myTitle;
                    NSString *pendingWorkflowID =_workFlowID;
                    UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
                    ShareVC *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"ShareVC"];
                    objTrackOrderVC.documentName = pendingdocumentName;
                    objTrackOrderVC.workflowID = pendingWorkflowID;
                    [self.navigationController pushViewController:objTrackOrderVC animated:YES];
                    
//                    UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
//                    ShareVC *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"ShareVC"];
//                    self.definesPresentationContext = YES;
//                    objTrackOrderVC.modalPresentationStyle = UIModalPresentationOverCurrentContext;
//                    objTrackOrderVC.documentName = _myTitle;
//                    objTrackOrderVC.workflowID = _workFlowID;
//                    [self.navigationController presentViewController:objTrackOrderVC animated:YES completion:nil];
                    break;
                }
                case 1:
                {
                    UIAlertView *alertView32 = [[UIAlertView alloc] initWithTitle:@"Download"
                                                                          message:@"Do you want to download document?"
                                                                         delegate:self
                                                                cancelButtonTitle:@"Yes"
                                                                otherButtonTitles:@"No", nil];
                    alertView32.tag = 32;
                    [alertView32 show];

                    break;
                }
                case 2:
                {
                    UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
                    DocumentLogVC *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"DocumentLogVC"];
                    
                    objTrackOrderVC.workflowID = _workFlowID;
                    [self.navigationController pushViewController:objTrackOrderVC animated:YES];
                    //[self presentViewController:objTrackOrderVC animated:YES completion:nil];
                    break;
                }
                    
                default:
                    break;
            }
        

        }
        else if(actionSheet.tag == 103) {
            //do something else
            switch (buttonIndex) {
//                case 0: {
//
//
//
//                    NSString * aadhaarNumber = [[NSUserDefaults standardUserDefaults]
//                                                valueForKey:@"SavedAadhaarNumber"];
//                    if ([aadhaarNumber isEqualToString:@"<null>"] || [aadhaarNumber isEqualToString:@""])
//                    {
//
//
//                        UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
//                        GetOTPVC *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"GetOTPVC"];
//                        self.definesPresentationContext = YES; //self is presenting view controller
//                        objTrackOrderVC.modalPresentationStyle = UIModalPresentationOverCurrentContext;
//                        [self.navigationController presentViewController:objTrackOrderVC animated:YES completion:nil];
//
//
//                    }
//                    else
//                    {
//
//                        //SavedAadhaarNumber
//
//                        [self startActivity:@"Loading..."];
//                        NSString *requestURL = [NSString stringWithFormat:@"%@GetOTP?AadhaarNumber=%@",kGetOTP,[[NSUserDefaults standardUserDefaults]valueForKey:@"SavedAadhaarNumber"]];
//
//                        [WebserviceManager sendSyncRequestWithURLGet:requestURL method:SAServiceReqestHTTPMethodGET body:requestURL completionBlock:^(BOOL status, id responseValue) {
//
//                            if(status)
//                            {
//                                dispatch_async(dispatch_get_main_queue(),
//                                               ^{
//                                                   NSNumber * isSuccessNumber = (NSNumber *)[responseValue valueForKey:@"IsSuccess"];
//                                                   if([isSuccessNumber boolValue] == YES)
//                                                   {
//                                                       _otpArray = responseValue;
//                                                       UIAlertController * alert = [UIAlertController
//                                                                                    alertControllerWithTitle:@""
//                                                                                    message:[[responseValue valueForKey:@"Messages"] objectAtIndex:0]
//                                                                                    preferredStyle:UIAlertControllerStyleAlert];
//
//                                                       //Add Buttons
//
//                                                       UIAlertAction* yesButton = [UIAlertAction
//                                                                                   actionWithTitle:@"Ok"
//                                                                                   style:UIAlertActionStyleDefault
//                                                                                   handler:^(UIAlertAction * action) {
//                                                                                       //Handle your yes please button action here
//                                                                                       //[self clearAllData];
//                                                                                       UIStoryboard *newStoryBoard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
//                                                                                       CustomSignVC *objTrackOrderVC= [newStoryBoard instantiateViewControllerWithIdentifier:@"CustomSignVC"];
//                                                                                       objTrackOrderVC.aadhaarString = [[NSUserDefaults standardUserDefaults]valueForKey:@"SavedAadhaarNumber"];
//                                                                                       self.definesPresentationContext = YES; //self is presenting view controller
//                                                                                       objTrackOrderVC.modalPresentationStyle = UIModalPresentationOverCurrentContext;
//                                                                                       [self presentViewController:objTrackOrderVC animated:YES completion:nil];
//                                                                                   }];
//
//                                                       //Add your buttons to alert controller
//
//                                                       [alert addAction:yesButton];
//                                                       //[alert addAction:noButton];
//
//                                                       [self presentViewController:alert animated:YES completion:nil];
//
//
//
//
//                                                       [self stopActivity];
//                                                   }
//                                                   else{
//                                                       UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"" message:[[responseValue valueForKey:@"Messages"] objectAtIndex:0] delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
//                                                       [alert show];
//                                                       [self stopActivity];
//                                                   }
//
//
//                                               });
//
//                            }
//                            else{
//
//
//                            }
//
//                        }];
//
//                        [self stopActivity];
//
//
//                    }
//
//
//                    break;
//                }
                case 0:
                {
                    [self showModal:UIModalPresentationFullScreen style:[MPBDefaultStyleSignatureViewController alloc]];
                    //                NSString *iTunesLink = @"https://itunes.apple.com/us/app/11th-hours/id1066691881?ls=1&mt=8";
                    //                [[UIApplication sharedApplication] openURL:[NSURL URLWithString:iTunesLink]];
                    break;
                }
                    
                default:
                    break;
            }

        }
     });
}


- (BOOL)textField:(UITextField *)textField
shouldChangeCharactersInRange:(NSRange)range
replacementString:(NSString *)string {
    NSString *resultText = [textField.text stringByReplacingCharactersInRange:range
                                                                   withString:string];
    return resultText.length <= 12;
}


/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/


@end
